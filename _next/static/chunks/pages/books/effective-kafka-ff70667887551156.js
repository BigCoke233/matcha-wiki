(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[82],{7382:function(e,n,s){(window.__NEXT_P=window.__NEXT_P||[]).push(["/books/effective-kafka",function(){return s(3217)}])},9923:function(e,n,s){"use strict";s.d(n,{Z:function(){return d}});var t=s(5893);s(7294);let i="My detailed reading notes from computer science books",o="/reading-notes";var a=s(1163),r=s(5675),l=s.n(r);let c={logo:(0,t.jsx)(function(){return(0,t.jsx)(l(),{src:"".concat(o,"/logo.png"),alt:"Reading notes homepage",width:30,height:30})},{}),project:{link:"https://github.com/mkrtchian/reading-notes"},docsRepositoryBase:"https://github.com/mkrtchian/reading-notes/blob/main",footer:{text:"Made by Roman Mkrtchian"},head:function(){let e="Reading notes";return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)("meta",{name:"msapplication-TileColor",content:"#fff"}),(0,t.jsx)("meta",{httpEquiv:"Content-Language",content:"en"}),(0,t.jsx)("meta",{name:"description",content:i}),(0,t.jsx)("meta",{property:"og:title",content:e}),(0,t.jsx)("meta",{property:"og:description",content:i}),(0,t.jsx)("meta",{name:"apple-mobile-web-app-title",content:e}),(0,t.jsx)("link",{rel:"icon",type:"image/x-icon",href:"".concat(o,"/favicon.ico")})]})},feedback:{content:()=>(0,t.jsx)(t.Fragment,{children:"Question? Give me feedback →"}),labels:"feedback"},useNextSeoProps:function(){let{route:e}=(0,a.useRouter)(),n={description:i};return"/"!==e?n.titleTemplate="%s – Reading notes":n.titleTemplate="%s",n},i18n:[]};var d=c},3217:function(e,n,s){"use strict";s.r(n),s.d(n,{default:function(){return l.Z}});var t=s(5893),i=s(8808),o=s(7928),a=s(9923);s(9966);var r=s(1151);s(5675);var l=s(2243);function c(e){let n=Object.assign({h1:"h1",h2:"h2",ul:"ul",li:"li",strong:"strong",em:"em"},(0,r.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{children:"Effective Kafka"}),"\n",(0,t.jsx)(n.h2,{id:"1---event-streaming-fundamentals",children:"1 - Event Streaming Fundamentals"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Les ",(0,t.jsx)(n.strong,{children:"syst\xe8mes distribu\xe9s"})," sont plus complexes que les syst\xe8mes non distribu\xe9s, ils d\xe9placent une partie de la ",(0,t.jsx)(n.strong,{children:"complexit\xe9 du local vers le global"}),".","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"La raison pour laquelle on les utilise c’est qu’ils permettent de d\xe9composer le syst\xe8me en plus petits probl\xe8mes qu’on va pouvoir diviser entre plusieurs \xe9quipes."}),"\n",(0,t.jsx)(n.li,{children:"La complexit\xe9 globale peut \xeatre r\xe9duite par certaines techniques, par exemple les messages asynchrones."}),"\n",(0,t.jsx)(n.li,{children:"On y trouve des \xe9checs partiels, intermittents, ou m\xeame byzantins (les nœuds envoient des informations fausses)."}),"\n",(0,t.jsx)(n.li,{children:"Le probl\xe8me le plus important est sans doute celui de la consistance."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["L’",(0,t.jsx)(n.strong,{children:"event-driven architecture"})," (EDA) consiste \xe0 avoir des ",(0,t.jsx)(n.em,{children:"emitters"})," envoyant des notifications d’event \xe0 des ",(0,t.jsx)(n.em,{children:"consumers"}),".","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Les emitters n’ont aucune connaissance des consumers. Et de m\xeame les consumers n’ont pas connaissance des emitters."}),"\n",(0,t.jsx)(n.li,{children:"Les notifications d’event sont immutables, que ce soit c\xf4t\xe9 emitter ou consumer."}),"\n",(0,t.jsxs)(n.li,{children:["L’EDA est la mani\xe8re ",(0,t.jsx)(n.strong,{children:"la plus d\xe9coupl\xe9e"})," de faire communiquer des composants entre eux.","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Le seul couplage sera dans le contenu des messages qui transitent."}),"\n",(0,t.jsxs)(n.li,{children:["Imaginons un syst\xe8me d’e-commerce, avec une plateforme BI et un CRM. Il leur suffira de consommer les events d’achat et d’y r\xe9agir en toute ind\xe9pendance.","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Parmi les autres possibilit\xe9s qu’on aurait pour l’exemple e-commerce :","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"On peut les mettre dans un monolith (non-modulaire), mais la complexit\xe9 risque d’augmenter \xe0 mesure que le mod\xe8le global est enrichi."}),"\n",(0,t.jsxs)(n.li,{children:["On peut utiliser des patterns d’int\xe9gration : des messages synchrones envoy\xe9s par le composant e-commerce ou par les deux autres. Dans ce cas on se rapproche du distributed monolith parce que les composants ne seront pas ind\xe9pendants.","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"NDLR : toute communication synchrone rel\xe8verait du distributed monolith, un peu violent…"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["On peut utiliser la ",(0,t.jsx)(n.em,{children:"data decapsulation"}),", o\xf9 les composants BI et CRM viennent lire la DB du composant e-commerce. Dans ce cas on se retrouve dans un mode “get rich quick scheme” qui m\xe8ne toujours \xe0 des pleurs. Le couplage est maximal."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Cet exemple montre que ",(0,t.jsx)(n.strong,{children:"l’EDA scale de mani\xe8re lin\xe9aire"}),", alors qu’avec les approches plus coupl\xe9es, la complexit\xe9 explose quand on scale le nombre de composants."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["L’EDA est beaucoup ",(0,t.jsx)(n.strong,{children:"plus r\xe9silient"})," que les approches coupl\xe9es : si un composant est en situation d’\xe9chec, il a peu de chances d’impacter d’autres composants.","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Si on reprend l’exemple d’e-commerce :","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Dans le cas o\xf9 le composant d’e-commerce est en situation d’\xe9chec, les autres composants vont continuer \xe0 pouvoir fonctionner, mais simplement ils ne recevront plus de nouveaux events."}),"\n",(0,t.jsx)(n.li,{children:"Dans le cas o\xf9 par exemple le CRM est en situation d’\xe9chec, les events continueront d’arriver, et il pourra toujours rattraper son retard d\xe8s qu’il est r\xe9tabli."}),"\n",(0,t.jsx)(n.li,{children:"On peut aussi pr\xe9voir une mesure pour que si le message broker est en situation d’\xe9chec, l’\xe9metteur puisse publier les events localement, pour les mettre dans le message broker plus tard."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Dans un syst\xe8me coupl\xe9, un composant qui est en \xe9chec peut entra\xeener des ",(0,t.jsx)(n.em,{children:"correlated failures"})," chez les autres qui en d\xe9pendent.","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["On peut aussi avoir des ",(0,t.jsx)(n.em,{children:"congestive collapses"})," dans le cas o\xf9 certains composants sont temporairement surcharg\xe9s, et que les requ\xeates synchrones m\xe8nent \xe0 avoir des timeouts, puis \xe0 envoyer plus de requ\xeates."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["L’EDA a aussi des avantages en termes de ",(0,t.jsx)(n.strong,{children:"consistance"}),".","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Il favorise l’ownership d’un \xe9l\xe9ment stateful par un composant unique, les autres composants recevant les notifications d’event ne pouvant pas modifier cet \xe9tat."}),"\n",(0,t.jsxs)(n.li,{children:["En dehors du composant owner, les events sont rejouables ",(0,t.jsx)(n.strong,{children:"dans le bon ordre"}),", garantissant une ",(0,t.jsx)(n.em,{children:"sequential consistency"}),"."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["L’EDA n’est cependant pas adapt\xe9e dans certains cas.","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Elle n’est ",(0,t.jsx)(n.strong,{children:"pas adapt\xe9e aux interactions synchrones"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"Par contre, dans les cas o\xf9 on peut l’utiliser, elle permet des am\xe9liorations significatives des aspects non fonctionnels."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["L’",(0,t.jsx)(n.strong,{children:"event streaming"})," est un moyen d’obtenir un stream ",(0,t.jsx)(n.strong,{children:"durable"})," et ",(0,t.jsx)(n.strong,{children:"ordonn\xe9"}),", d’events ",(0,t.jsx)(n.strong,{children:"immutables"}),", d\xe9livr\xe9s aux consumers qui ont souscrit.","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"L’event streaming n’est pas n\xe9cessaire pour impl\xe9menter l’EDA, qui peut d’ailleurs \xeatre impl\xe9ment\xe9 dans un monolith (cf. outils comme React qui sont bas\xe9s sur des events)."}),"\n",(0,t.jsxs)(n.li,{children:["En revanche l’",(0,t.jsx)(n.strong,{children:"event streaming est pertinent"})," comme choix face aux solutions concurrentes (comme les message queues) ",(0,t.jsx)(n.strong,{children:"dans le cadre d’EDA distribu\xe9es"}),", parce qu’il a \xe9t\xe9 con\xe7u pour \xe7a.","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"L’event streaming supporte nativement l’immutabilit\xe9 des events."}),"\n",(0,t.jsx)(n.li,{children:"Il supporte la garantie d’ordre des events."}),"\n",(0,t.jsx)(n.li,{children:"Il supporte le fait d’avoir de multiples consumers."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]})}e=s.hmd(e),(0,i.j)({Content:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)},nextraLayout:o.ZP,hot:e.hot,pageOpts:{filePath:"pages/books/effective-kafka.md",route:"/books/effective-kafka",frontMatter:{},pageMap:[{kind:"Meta",data:{index:"Introduction",books:"Reading notes"}},{kind:"Folder",name:"books",route:"/books",children:[{kind:"Meta",data:{"continuous-discovery-habits":"Continuous Discovery Habits","designing-data-intensive-applications":"Designing Data-Intensive Applications","effective-kafka":"Effective Kafka","get-your-hands-dirty-on-clean-architecture":"Get Your Hands Dirty on Clean Architecture","learning-domain-driven-design":"Learning Domain-Driven Design","monolith-to-microservices":"Monolith to Microservices",refactoring:"Refactoring: Improving the Design of Existing Code","reinventing-organizations":"Reinventing Organizations","team-topologies":"Team Topologies","the-design-of-web-apis":"The Design of Web APIs","unit-testing":"Unit Testing: Principles, Practices, and Patterns"}},{kind:"MdxPage",name:"continuous-discovery-habits",route:"/books/continuous-discovery-habits"},{kind:"MdxPage",name:"designing-data-intensive-applications",route:"/books/designing-data-intensive-applications"},{kind:"MdxPage",name:"effective-kafka",route:"/books/effective-kafka"},{kind:"MdxPage",name:"get-your-hands-dirty-on-clean-architecture",route:"/books/get-your-hands-dirty-on-clean-architecture"},{kind:"MdxPage",name:"learning-domain-driven-design",route:"/books/learning-domain-driven-design"},{kind:"MdxPage",name:"monolith-to-microservices",route:"/books/monolith-to-microservices"},{kind:"MdxPage",name:"refactoring",route:"/books/refactoring"},{kind:"MdxPage",name:"reinventing-organizations",route:"/books/reinventing-organizations"},{kind:"MdxPage",name:"team-topologies",route:"/books/team-topologies"},{kind:"MdxPage",name:"the-design-of-web-apis",route:"/books/the-design-of-web-apis"},{kind:"MdxPage",name:"unit-testing",route:"/books/unit-testing"}]},{kind:"MdxPage",name:"index",route:"/"}],headings:[{depth:1,value:"Effective Kafka",id:"effective-kafka"},{depth:2,value:"1 - Event Streaming Fundamentals",id:"1---event-streaming-fundamentals"}],flexsearch:{codeblocks:!0},title:"Effective Kafka"},themeConfig:a.Z,pageNextRoute:"/books/effective-kafka",pageOptsChecksum:void 0,dynamicMetaModules:[]})}},function(e){e.O(0,[774,558,888,179],function(){return e(e.s=7382)}),_N_E=e.O()}]);